@use "sass:color";
@use "sass:map";
@use "sass:meta";

@function ecms_map_on_list($fn, $xs) {
  $out: ();
  $i: 0;
  @each $x in $xs {
    $out: append($out, call($fn, $x, $i));
    $i: $i + 1;
  }
  @return $out;
}

@function ecms_map_on_map($fn, $xs) {
  $out: ();
  @each $k, $v in $xs {
    $out: map-merge($out, call($fn, $v, $k))
  }
  @return $out;
}

@function ecms_gen_colors_map($color-seeds-map, $stepsAssocList) {
  $out-map: ();
  @each $k, $color in $color-seeds-map {
    @each $stepKey, $step in $stepsAssocList {
      $out-map: map-merge($out-map, (
        #{$k}-#{$stepKey}: change-color($color, $lightness: $step * 100%),
      ));
    }
    @each $stepKey, $step in $stepsAssocList {
      $out-map: map-merge($out-map, (
        #{$k}-rgba-#{$stepKey}: change-color($color, $alpha: 1 - $step)
      ));
    }
  }
  @return $out-map;
}

@function ecms_key_val_to_unit_map ($v, $k) {
  @return ($k: #{$v * 0.01}rem);
}

@function ecms_gen_spacing_map ($numMap) {
  $fn: get-function("ecms_key_val_to_unit_map");
  @return ecms_map_on_map($fn, $numMap);
}

@function ecms_fib_index_assoc_list_item ($tuple) {
  $key-value-pair: nth($tuple, 2);
  @return (
    ind: nth($tuple, 1),
    key: nth($key-value-pair, 1),
    value: nth($key-value-pair, 2),
  );
}

@function ecms_gen_one_point_shadow_map ($indexAssocListMap, $shadowColor: rgba(0,0,0,0.21), $unit: rem) {
  $out: ();
  $listLen: length($indexAssocListMap);
  @each $tuple in $indexAssocListMap {
    $item1: ecms_fib_index_assoc_list_item($tuple);
    $i: map-get($item1, "ind");
    $k1: map-get($item1, "key");
    $v1: map-get($item1, "value");
    $item2: nth($indexAssocListMap, $listLen);
    @if $i < $listLen {
      $item2: nth($indexAssocListMap, $i + 1);
    }
    $item2: ecms_fib_index_assoc_list_item($item2);
    $v2: map-get($item2, "value");
    $out: map-merge($out, (#{$k1}: 0 $v1#{$unit} $v2#{$unit} #{$shadowColor}));
    $out: map-merge($out, (#{$k1}-inset: 0 $v1#{$unit} $v2#{$unit} #{$shadowColor} inset));
  }
  @return $out;
}

@function ecms_merge_two_point_shadow_map ($shadowMap, $indexAssocListMap, $unit: rem) {
  $out: map_merge((), $shadowMap);
  $listLen: length($indexAssocListMap);
  @each $tuple in $indexAssocListMap {
    $item0: ecms_fib_index_assoc_list_item($tuple);
    $i: map-get($item0, "ind");
    $k1: map-get($item0, "key");
    $v1: map-get($item0, "value");
    $item1: nth($indexAssocListMap, $listLen);
    @if $i < $listLen {
      $item1: nth($indexAssocListMap, $i + 1);
    }
    $item1: ecms_fib_index_assoc_list_item($item1);
    $i2: map-get($item1, "ind");
    $k2: map-get($item1, "key");
    $v2: map-get($item1, "value");
    $shadow1: map-get($out, $k1);
    $shadow2: map-get($out, $k2);
    $out: map-merge($out, (#{$k1}-two-point: ($shadow1, $shadow2)));
  }
  @return $out;
}
